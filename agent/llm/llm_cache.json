{
  "cf3b7270805b75bfc41cafaacfc42511": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "Hello! I'm here to help you generate application code using the FSM (Finite State Machine) code generation framework. To get started, I need a description of the application you'd like me to build. \n\nCould you please provide details about what kind of application you'd like to create? For example:\n- What is the purpose of the application?\n- What features should it include?\n- Are there any specific technologies you'd like to use?\n- Any other requirements you have in mind?\n\nOnce you provide this information, I can start the code generation process and guide you through each step."
      }
    ],
    "input_tokens": 906,
    "output_tokens": 129,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "c79b23a0eec49e3ab7499334496d04df": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll help you implement a calculator app using our code generation framework. Let me start a new FSM session for this purpose."
      },
      {
        "type": "tool_use",
        "name": "start_fsm",
        "input": {
          "app_description": "A web-based calculator application that can perform basic arithmetic operations (addition, subtraction, multiplication, division) as well as support decimal points and clearing the display. The calculator should have a clean, user-friendly interface with buttons for digits 0-9, operators, decimal point, and clear functionality."
        },
        "id": "toolu_01YQyWAa2Pgn7wuEmvpjiXj7"
      }
    ],
    "input_tokens": 910,
    "output_tokens": 143,
    "stop_reason": "tool_use",
    "thinking_tokens": null
  },
  "efb106f11b8a72e06b49ddc73748303c": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll create the necessary files for your web-based calculator application.\n\n<file path=\"src/schema.ts\">\nimport { z } from 'zod';\n\n// Calculator operation schema\nexport const calculateInputSchema = z.object({\n  firstOperand: z.number(),\n  secondOperand: z.number(),\n  operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n});\n\nexport type CalculateInput = z.infer<typeof calculateInputSchema>;\n\nexport const calculateResultSchema = z.object({\n  result: z.number(),\n  error: z.string().optional(),\n});\n\nexport type CalculateResult = z.infer<typeof calculateResultSchema>;\n\n// For storing calculation history\nexport const storeCalculationInputSchema = z.object({\n  firstOperand: z.number(),\n  secondOperand: z.number(),\n  operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n  result: z.number(),\n  userId: z.string().optional(),\n});\n\nexport type StoreCalculationInput = z.infer<typeof storeCalculationInputSchema>;\n\n// For retrieving calculation history\nexport const getCalculationHistoryInputSchema = z.object({\n  userId: z.string().optional(),\n  limit: z.number().min(1).max(100).default(10),\n  offset: z.number().min(0).default(0),\n});\n\nexport type GetCalculationHistoryInput = z.infer<typeof getCalculationHistoryInputSchema>;\n\nexport const calculationHistoryItemSchema = z.object({\n  id: z.number(),\n  firstOperand: z.number(),\n  secondOperand: z.number(),\n  operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n  result: z.number(),\n  userId: z.string().optional(),\n  createdAt: z.date(),\n});\n\nexport type CalculationHistoryItem = z.infer<typeof calculationHistoryItemSchema>;\n\nexport const calculationHistoryResponseSchema = z.object({\n  calculations: z.array(calculationHistoryItemSchema),\n  total: z.number(),\n});\n\nexport type CalculationHistoryResponse = z.infer<typeof calculationHistoryResponseSchema>;\n</file>\n\n<file path=\"src/db/schema.ts\">\nimport { serial, numeric, text, pgTable, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\n\n// Enum for operation types\nexport const operationEnum = pgEnum('operation_type', ['add', 'subtract', 'multiply', 'divide']);\n\n// Table for storing calculation history\nexport const calculationsTable = pgTable(\"calculations\", {\n  id: serial(\"id\").primaryKey(),\n  firstOperand: numeric(\"first_operand\", { precision: 65, scale: 30 }).notNull(),\n  secondOperand: numeric(\"second_operand\", { precision: 65, scale: 30 }).notNull(),\n  operation: operationEnum(\"operation\").notNull(),\n  result: numeric(\"result\", { precision: 65, scale: 30 }).notNull(),\n  userId: text(\"user_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n\n// Settings table for user preferences (theme, precision, etc.)\nexport const calculatorSettingsTable = pgTable(\"calculator_settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\").unique().notNull(),\n  decimalPrecision: numeric(\"decimal_precision\", { precision: 2 }).default(\"2\").notNull(),\n  theme: text(\"theme\").default(\"light\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull()\n});\n</file>\n\n<file path=\"src/handlers/calculate.ts\">\nimport { type CalculateInput, type CalculateResult } from \"../schema\";\n\nexport declare function calculate(input: CalculateInput): Promise<CalculateResult>;\n</file>\n\n<file path=\"src/handlers/store_calculation.ts\">\nimport { type StoreCalculationInput, type CalculationHistoryItem } from \"../schema\";\n\nexport declare function storeCalculation(input: StoreCalculationInput): Promise<CalculationHistoryItem>;\n</file>\n\n<file path=\"src/handlers/get_calculation_history.ts\">\nimport { type GetCalculationHistoryInput, type CalculationHistoryResponse } from \"../schema\";\n\nexport declare function getCalculationHistory(input: GetCalculationHistoryInput): Promise<CalculationHistoryResponse>;\n</file>\n\n<file path=\"src/handlers/clear_calculation_history.ts\">\nimport { z } from \"zod\";\nimport { type CalculationHistoryResponse } from \"../schema\";\n\nexport declare function clearCalculationHistory(input: { userId?: string }): Promise<{ success: boolean }>;\n</file>\n\n<file path=\"src/handlers/get_calculator_settings.ts\">\nimport { z } from \"zod\";\n\nexport declare function getCalculatorSettings(input: { userId: string }): Promise<{\n  decimalPrecision: number;\n  theme: string;\n}>;\n</file>\n\n<file path=\"src/handlers/update_calculator_settings.ts\">\nimport { z } from \"zod\";\n\nexport declare function updateCalculatorSettings(input: {\n  userId: string;\n  decimalPrecision?: number;\n  theme?: string;\n}): Promise<{\n  decimalPrecision: number;\n  theme: string;\n}>;\n</file>"
      }
    ],
    "input_tokens": 895,
    "output_tokens": 1351,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "b6bcc1937a286097bb218e7c3640b9f4": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'd be happy to help you create a todo app. Let's use the FSM framework to generate this application step by step.\n\nFirst, I'll start a new FSM session for generating a todo application:"
      },
      {
        "type": "tool_use",
        "name": "start_fsm",
        "input": {
          "app_description": "A simple todo application that allows users to add, edit, delete, and mark tasks as complete. The app should have a clean user interface with a form to add new tasks and a list to display existing tasks with options to edit, delete, and toggle completion status."
        },
        "id": "toolu_01V2tMh9NuZ3oLj94CCQkaBj"
      }
    ],
    "input_tokens": 909,
    "output_tokens": 153,
    "stop_reason": "tool_use",
    "thinking_tokens": null
  },
  "a2560927e85cc2a0de0faff7f9c24f22": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll create a simple todo application with the following components:\n\n<file path=\"src/schema.ts\">\nimport { z } from 'zod';\n\n// Task schemas\nexport const taskSchema = z.object({\n  id: z.number(),\n  title: z.string(),\n  description: z.string().optional(),\n  completed: z.boolean(),\n  created_at: z.date(),\n  updated_at: z.date().nullable(),\n});\n\nexport type Task = z.infer<typeof taskSchema>;\n\n// Create task input schema\nexport const createTaskInputSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n});\n\nexport type CreateTaskInput = z.infer<typeof createTaskInputSchema>;\n\n// Update task input schema\nexport const updateTaskInputSchema = z.object({\n  id: z.number(),\n  title: z.string().min(1, \"Title is required\").optional(),\n  description: z.string().optional(),\n  completed: z.boolean().optional(),\n});\n\nexport type UpdateTaskInput = z.infer<typeof updateTaskInputSchema>;\n\n// Delete task input schema\nexport const deleteTaskInputSchema = z.object({\n  id: z.number(),\n});\n\nexport type DeleteTaskInput = z.infer<typeof deleteTaskInputSchema>;\n\n// Toggle task completion input schema\nexport const toggleTaskCompletionInputSchema = z.object({\n  id: z.number(),\n});\n\nexport type ToggleTaskCompletionInput = z.infer<typeof toggleTaskCompletionInputSchema>;\n\n// Get task input schema\nexport const getTaskInputSchema = z.object({\n  id: z.number(),\n});\n\nexport type GetTaskInput = z.infer<typeof getTaskInputSchema>;\n\n// Get all tasks input schema - may include filtering options later\nexport const getAllTasksInputSchema = z.object({\n  completed: z.boolean().optional(),\n});\n\nexport type GetAllTasksInput = z.infer<typeof getAllTasksInputSchema>;\n</file>\n\n<file path=\"src/db/schema.ts\">\nimport { serial, text, boolean, pgTable, timestamp } from \"drizzle-orm/pg-core\";\n\nexport const tasksTable = pgTable(\"tasks\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  completed: boolean(\"completed\").default(false).notNull(),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\")\n});\n</file>\n\n<file path=\"src/handlers/create_task.ts\">\nimport { type CreateTaskInput } from \"../schema\";\nimport { type Task } from \"../schema\";\n\nexport declare function createTask(input: CreateTaskInput): Promise<Task>;\n</file>\n\n<file path=\"src/handlers/update_task.ts\">\nimport { type UpdateTaskInput } from \"../schema\";\nimport { type Task } from \"../schema\";\n\nexport declare function updateTask(input: UpdateTaskInput): Promise<Task>;\n</file>\n\n<file path=\"src/handlers/delete_task.ts\">\nimport { type DeleteTaskInput } from \"../schema\";\n\nexport declare function deleteTask(input: DeleteTaskInput): Promise<{ success: boolean }>;\n</file>\n\n<file path=\"src/handlers/toggle_task_completion.ts\">\nimport { type ToggleTaskCompletionInput } from \"../schema\";\nimport { type Task } from \"../schema\";\n\nexport declare function toggleTaskCompletion(input: ToggleTaskCompletionInput): Promise<Task>;\n</file>\n\n<file path=\"src/handlers/get_task.ts\">\nimport { type GetTaskInput } from \"../schema\";\nimport { type Task } from \"../schema\";\n\nexport declare function getTask(input: GetTaskInput): Promise<Task | null>;\n</file>\n\n<file path=\"src/handlers/get_all_tasks.ts\">\nimport { type GetAllTasksInput } from \"../schema\";\nimport { type Task } from \"../schema\";\n\nexport declare function getAllTasks(input: GetAllTasksInput): Promise<Task[]>;\n</file>"
      }
    ],
    "input_tokens": 887,
    "output_tokens": 987,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "81b5d3fe67faa1026e76bb98a1247dc1": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'd be happy to help you generate an application with authentication features. However, to create a complete app, I'll need a more detailed description of what kind of application you want to build.\n\nCould you please provide more information about:\n1. What type of application you want (web app, mobile app, etc.)\n2. What the main purpose of the application is\n3. What kind of authentication you'd like (email/password, social login, etc.)\n4. Any other specific features you want included\n\nWith these details, I can start the FSM process to generate your app with authentication."
      }
    ],
    "input_tokens": 910,
    "output_tokens": 129,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "fc5cdf09c592c0f16e69460fde61188c": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll help you create a simple \"Hello World\" application using the FSM code generation framework. Let's start by defining what we want to build."
      },
      {
        "type": "tool_use",
        "name": "start_fsm",
        "input": {
          "app_description": "A simple Hello World web application that displays \"Hello, World!\" on the screen. The app should have a clean, minimal interface with the message displayed prominently in the center."
        },
        "id": "toolu_01YVruJkLD9URft6ydCAbDmV"
      }
    ],
    "input_tokens": 910,
    "output_tokens": 122,
    "stop_reason": "tool_use",
    "thinking_tokens": null
  },
  "6e84b1fd5d5f8c8e138d5a80f5d16071": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll create the necessary files for a simple \"Hello World\" application. This will include schema definitions, database schema, and handler declaration.\n\n<file path=\"src/schema.ts\">\nimport { z } from 'zod';\n\nexport const helloWorldInputSchema = z.object({\n  name: z.string().optional().default('World'),\n});\n\nexport type HelloWorldInput = z.infer<typeof helloWorldInputSchema>;\n\nexport const helloWorldResponseSchema = z.object({\n  message: z.string(),\n});\n\nexport type HelloWorldResponse = z.infer<typeof helloWorldResponseSchema>;\n</file>\n\n<file path=\"src/db/schema.ts\">\nimport { serial, text, pgTable, timestamp } from \"drizzle-orm/pg-core\";\n\nexport const greetingsTable = pgTable(\"greetings\", {\n  id: serial(\"id\").primaryKey(),\n  message: text(\"message\").notNull(),\n  name: text(\"name\").notNull().default('World'),\n  created_at: timestamp(\"created_at\").defaultNow().notNull()\n});\n</file>\n\n<file path=\"src/handlers/hello_world.ts\">\nimport { type HelloWorldInput, type HelloWorldResponse } from \"../schema\";\n\nexport declare function helloWorld(input: HelloWorldInput): Promise<HelloWorldResponse>;\n</file>"
      }
    ],
    "input_tokens": 869,
    "output_tokens": 318,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "dd41baedce033f0a700bb38dda5df8cf": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'd be happy to help you generate an application with a welcome message. However, I need more information about what kind of application you want to create. The welcome message would be part of a larger application context.\n\nCould you please provide more details about:\n1. What type of application you want to build (web app, mobile app, desktop app, etc.)\n2. Any specific functionality you'd like the application to have\n3. Any particular technology preferences (React, Vue, Node.js, etc.)\n\nWith this information, I can start the FSM process to generate a complete application that includes your welcome message."
      }
    ],
    "input_tokens": 909,
    "output_tokens": 132,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "0418520d3ab1173ec0d1f27a140d28f5": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'd be happy to help you add a goodbye message to an application, but I need some context about what kind of application you're working with. The FSM tool requires a complete application description to generate code.\n\nCould you please provide more details about:\n1. What type of application do you want to add a goodbye message to?\n2. Is this a web application, mobile app, or something else?\n3. Any specific features or functionality you want in the application besides the goodbye message?\n\nOnce I have this information, I can start the FSM session to generate an application that includes your goodbye message."
      }
    ],
    "input_tokens": 909,
    "output_tokens": 130,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "6d217a939132b50a64b0557ba34d8091": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll help you create a counter app using the code generation framework. This will be a simple application that allows users to increment, decrement, and reset a counter.\n\nLet's start by initiating the FSM session:"
      },
      {
        "type": "tool_use",
        "name": "start_fsm",
        "input": {
          "app_description": "A simple counter application that allows users to increment, decrement, and reset a counter value. The app should display the current count prominently and have buttons for each action (increment, decrement, reset). The counter should start at 0 and have no upper or lower limits."
        },
        "id": "toolu_01Ejs3EWBRcqzcLK1MV9VbBt"
      }
    ],
    "input_tokens": 909,
    "output_tokens": 159,
    "stop_reason": "tool_use",
    "thinking_tokens": null
  },
  "c2300b9da39a1d5b9cad5661dc02aa60": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll create the necessary files for a counter application with increment, decrement, and reset functionality.\n\n<file path=\"src/schema.ts\">\nimport { z } from 'zod';\n\n// Counter schemas\nexport const getCounterSchema = z.object({\n  id: z.string()\n});\nexport type GetCounter = z.infer<typeof getCounterSchema>;\n\nexport const incrementCounterSchema = z.object({\n  id: z.string()\n});\nexport type IncrementCounter = z.infer<typeof incrementCounterSchema>;\n\nexport const decrementCounterSchema = z.object({\n  id: z.string()\n});\nexport type DecrementCounter = z.infer<typeof decrementCounterSchema>;\n\nexport const resetCounterSchema = z.object({\n  id: z.string()\n});\nexport type ResetCounter = z.infer<typeof resetCounterSchema>;\n\nexport const createCounterSchema = z.object({\n  name: z.string().optional()\n});\nexport type CreateCounter = z.infer<typeof createCounterSchema>;\n\n// Counter response type\nexport const counterResponseSchema = z.object({\n  id: z.string(),\n  name: z.string().nullable(),\n  value: z.number(),\n  createdAt: z.date()\n});\nexport type CounterResponse = z.infer<typeof counterResponseSchema>;\n</file>\n\n<file path=\"src/db/schema.ts\">\nimport { serial, text, integer, pgTable, timestamp, varchar } from \"drizzle-orm/pg-core\";\n\nexport const countersTable = pgTable(\"counters\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).default('').notNull(),\n  value: integer(\"value\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull()\n});\n</file>\n\n<file path=\"src/handlers/get_counter.ts\">\nimport { type GetCounter, type CounterResponse } from \"../schema\";\n\nexport declare function getCounter(input: GetCounter): Promise<CounterResponse>;\n</file>\n\n<file path=\"src/handlers/increment_counter.ts\">\nimport { type IncrementCounter, type CounterResponse } from \"../schema\";\n\nexport declare function incrementCounter(input: IncrementCounter): Promise<CounterResponse>;\n</file>\n\n<file path=\"src/handlers/decrement_counter.ts\">\nimport { type DecrementCounter, type CounterResponse } from \"../schema\";\n\nexport declare function decrementCounter(input: DecrementCounter): Promise<CounterResponse>;\n</file>\n\n<file path=\"src/handlers/reset_counter.ts\">\nimport { type ResetCounter, type CounterResponse } from \"../schema\";\n\nexport declare function resetCounter(input: ResetCounter): Promise<CounterResponse>;\n</file>\n\n<file path=\"src/handlers/create_counter.ts\">\nimport { type CreateCounter, type CounterResponse } from \"../schema\";\n\nexport declare function createCounter(input: CreateCounter): Promise<CounterResponse>;\n</file>"
      }
    ],
    "input_tokens": 891,
    "output_tokens": 732,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "4d702397154e9128de1d810c0f2fc247": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'd be happy to help you add a reset button to an application. To do this properly, I need to generate an application with a reset button functionality. However, I need more information about what kind of application you want to create and what should be reset when the button is clicked.\n\nCould you provide more details about:\n1. What type of application you want to create (e.g., a counter app, a form, a game, etc.)?\n2. What elements or state should be reset when the button is clicked?\n\nThis information will help me create a more appropriate implementation for your needs."
      }
    ],
    "input_tokens": 909,
    "output_tokens": 129,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  },
  "b8d8e9d1e50449a4bba4ae938b88d852": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll help you create a simple greeting app that says hello in five languages and stores a history of greetings. Let's start the code generation process using the FSM framework."
      },
      {
        "type": "tool_use",
        "name": "start_fsm",
        "input": {
          "app_description": "A simple greeting app that says hello in five languages (English, Spanish, French, Japanese, and German) and stores a history of greetings. The app should allow users to select a language, display the greeting in that language, and maintain a history of past greetings with timestamps."
        },
        "id": "toolu_01MgCURfTrZhi1vc5SH4GDKU"
      }
    ],
    "input_tokens": 922,
    "output_tokens": 152,
    "stop_reason": "tool_use",
    "thinking_tokens": null
  },
  "c7d5f6404f782ecca4b0b778cbbf1a47": {
    "role": "assistant",
    "content": [
      {
        "type": "text",
        "text": "I'll generate the required files based on your specifications for a greeting app that supports multiple languages.\n\n<file path=\"src/schema.ts\">\nimport { z } from 'zod';\n\n// Language selection schema\nexport const languageSchema = z.enum(['english', 'spanish', 'french', 'japanese', 'german']);\nexport type Language = z.infer<typeof languageSchema>;\n\n// Get greeting input schema\nexport const getGreetingInputSchema = z.object({\n  language: languageSchema,\n  name: z.string().optional(),\n});\nexport type GetGreetingInput = z.infer<typeof getGreetingInputSchema>;\n\n// Get greeting response schema\nexport const greetingResponseSchema = z.object({\n  message: z.string(),\n  language: languageSchema,\n});\nexport type GreetingResponse = z.infer<typeof greetingResponseSchema>;\n\n// Get greeting history input schema\nexport const getGreetingHistoryInputSchema = z.object({\n  limit: z.number().int().positive().default(10),\n  offset: z.number().int().nonnegative().default(0),\n});\nexport type GetGreetingHistoryInput = z.infer<typeof getGreetingHistoryInputSchema>;\n\n// Greeting history item schema\nexport const greetingHistoryItemSchema = z.object({\n  id: z.number(),\n  message: z.string(),\n  language: languageSchema,\n  created_at: z.date(),\n});\nexport type GreetingHistoryItem = z.infer<typeof greetingHistoryItemSchema>;\n\n// Greeting history response schema\nexport const greetingHistoryResponseSchema = z.object({\n  greetings: z.array(greetingHistoryItemSchema),\n  total: z.number(),\n});\nexport type GreetingHistoryResponse = z.infer<typeof greetingHistoryResponseSchema>;\n</file>\n\n<file path=\"src/db/schema.ts\">\nimport { serial, text, pgTable, timestamp, varchar } from \"drizzle-orm/pg-core\";\n\nexport const greetingsTable = pgTable(\"greetings\", {\n  id: serial(\"id\").primaryKey(),\n  message: text(\"message\").notNull(),\n  language: varchar(\"language\", { length: 20 }).notNull(),\n  name: varchar(\"name\", { length: 100 }),\n  created_at: timestamp(\"created_at\").defaultNow().notNull()\n});\n</file>\n\n<file path=\"src/handlers/get_greeting.ts\">\nimport { type GetGreetingInput, type GreetingResponse } from \"../schema\";\n\nexport declare function getGreeting(input: GetGreetingInput): Promise<GreetingResponse>;\n</file>\n\n<file path=\"src/handlers/save_greeting.ts\">\nimport { type GreetingResponse } from \"../schema\";\n\nexport declare function saveGreeting(greeting: GreetingResponse): Promise<{ success: boolean, id: number }>;\n</file>\n\n<file path=\"src/handlers/get_greeting_history.ts\">\nimport { type GetGreetingHistoryInput, type GreetingHistoryResponse } from \"../schema\";\n\nexport declare function getGreetingHistory(input: GetGreetingHistoryInput): Promise<GreetingHistoryResponse>;\n</file>"
      }
    ],
    "input_tokens": 893,
    "output_tokens": 797,
    "stop_reason": "end_turn",
    "thinking_tokens": null
  }
}