# Instructions

This file provides guidance to you (Cursor AI) when working with code in this repository.
Refer to this file when assisting with code generation, refactoring, or answering questions about the codebase.

When you make mistakes or receive corrections, note them in the Lessons section.
Use the Scratchpad to organize your thoughts when tackling complex tasks.

## Task Planning Structure
When planning complex tasks, use the following format in the Scratchpad:
[X] Completed task
[ ] Task in progress
[ ] Future task

Always refer back to the Scratchpad when determining next steps and update it as you make progress.

# Project Overview

This project implements an AI codegen agent system with various components for handling API interactions, core logic, and specific agent implementations. The system is built primarily in Python with some TypeScript components.

# Project Structure

- `agent` - Contains the main codegen agent code
  - `api` - IO layer for the agent
    - `agent_server` - API of the agent server
      - `models.py` - Models for the agent server consistent with agent_api.tsp
      - `agent_api.tsp` - Server type specification for the agent server
      - `async_server.py` - Agent server implementation
    - `cli` - CLI entrypoint
  - `core` - Core framework logic (base classes, state machine, etc.)
  - `trpc_agent` - Agent for fullstack code generation (new agents follow this pattern)
  - `llm` - LLM wrappers
  - `stash_bot` - Deprecated!
  - `log.py` - Global logging and tracing

# Development Workflow

Commands should typically be run from the `./agent` directory:

- **Run all tests**: `uv run pytest -v .`
- **Lint code**: `uv run ruff check` 
- **Format code**: `uv run ruff format`
- **Run tests in isolated env**: `docker build --target test -t agent-test:latest . && docker run --rm agent-test:latest`

# Code Style Guidelines

## Python

### Formatting and Structure
- **Line Length**: 120 characters max
- **Imports**: Standard library → third-party → local modules
- **Docstrings**: Use triple double quotes (`"""`)

### Naming Conventions
- **Variables/Functions**: `snake_case`
- **Classes**: `PascalCase`
- **Constants**: `UPPER_SNAKE_CASE`
- **JSON Keys/API Payload Fields**: `PascalCase` (must be hidden behind models.py with from_json/to_json methods)

### Language Features
- **Types**: Use modern typing: `def func(param: str | None = None)` not `param: str = None`
- **Async Code**: Use `anyio` over `asyncio`
- **Pattern Matching**: Prefer `match/case` over lengthy if/elif chains
- **Quotes**: 
  - Single quotes (`'`) for strings without special characters/apostrophes
  - Double quotes (`"`) for strings with special characters/apostrophes

### Error Handling and Logging
- **Logging**: Use `logger = get_logger(__name__)` 
- **Error Handling**: Prefer `logger.exception("message")` over `logger.error(str(e))`

### Testing
- **Framework**: Use `pytest` for unit tests
- **Mocks**: Avoid mocks unless explicitly required

## TypeScript

- **Types**: Use explicit interfaces and Zod for schema validation
- **Variables**: Prefer `const` over `let`
- **Naming**: 
  - Variables/Functions: `camelCase`
  - Types/Interfaces: `PascalCase`
- **Imports**: No renamed imports

# Common Patterns

## Agent Implementation
When implementing a new agent:
- Follow the pattern in `trpc_agent`
- Use the base classes from `core`
- Implement the required interfaces

## API Extension
When extending the API:
- Update `agent_api.tsp` with new types
- Implement corresponding models in `models.py`
- Update the server implementation in `async_server.py`

# Lessons

## User Specified Lessons
- Using `anyio` instead of `asyncio` for async operations is preferred in this codebase
- Always activate the Python virtual environment before installing packages
- Never use mocks in tests unless explicitly required

## Cursor Learned
- The state machine pattern in `core` requires explicit state transitions
- The logger setup requires using the `get_logger` function from `agent.log`
- Always check for existing patterns before implementing new functionality

# Scratchpad 